{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eric\\\\Desktop\\\\powerApp\\\\client\\\\src\\\\components\\\\Tracks\\\\ManageTrack.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { Row } from \"react-bootstrap\";\nimport Column from \"./TracksBoard/Column\";\nimport TrackForm from \"./TrackForm\";\nimport { StyledContainer } from \"../../styles\";\nimport { API_URL } from \"../../constants\";\n\nclass ManageTrack extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const {\n        id\n      } = this.props.match.params;\n      const {\n        trackNumber,\n        trackName,\n        columns\n      } = this.state;\n      const track = {\n        trackNumber,\n        trackName,\n        trackInfo: columns[\"column-2\"].items\n      };\n      axios.put(`${API_URL}/tracks/update/${id}`, track).then(res => {\n        const {\n          history\n        } = this.props;\n        alert(\"updated!\");\n        history.push(\"/tracks\");\n      });\n    };\n\n    this.onChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      trackName: \"\",\n      trackNumber: \"\",\n      trackInfo: [],\n      elements: [],\n      elementsEnums: {},\n      columns: {\n        \"column-1\": {\n          name: \"Elements\",\n          items: []\n        },\n        \"column-2\": {\n          name: \"Track List\",\n          items: []\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    Promise.all([axios.get(`${API_URL}/tracks/${id}`).then(response => {\n      return response.data;\n    }), axios.get(`${API_URL}/elements/`).then(response => {\n      return response.data;\n    })]).then(([tracks, elements]) => {\n      const elementsEnums = elements.reduce((all, one) => {\n        return { ...all,\n          [one._id]: one\n        };\n      }, {});\n      this.setState(oldState => {\n        const state = { ...oldState\n        };\n        state.columns[\"column-1\"].items = elements.filter(element => {\n          return !tracks.trackInfo.some(trackEle => trackEle._id === element._id);\n        });\n        state.columns[\"column-2\"].items = tracks.trackInfo;\n        return { ...state,\n          ...tracks,\n          elementsEnums,\n          elements\n        };\n      });\n    });\n  }\n\n  render() {\n    const {\n      columns,\n      elementsEnums,\n      elements,\n      trackInfo,\n      ...rest\n    } = this.state; // const col1 = columns[\"column-1\"];\n    // const col2 = columns[\"column-2\"];\n\n    return React.createElement(StyledContainer, {\n      fluid: true,\n      title: \"Update Track\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(TrackForm, Object.assign({}, this.state, {\n      buttonText: \"Update Track\",\n      onChange: this.onChange,\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(DragDropContext, {\n      onDragEnd: ({\n        source,\n        destination\n      }) => {\n        if (!destination) {\n          return;\n        }\n\n        const {\n          droppableId: sourceId,\n          index: sourceIndex\n        } = source;\n        const {\n          droppableId: destinationId,\n          index: destinationIndex\n        } = destination;\n\n        if (sourceId !== destinationId) {\n          this.setState(prev => {\n            const sourceColumn = prev.columns[sourceId];\n            const destColumn = prev.columns[destinationId];\n            const sourceItems = [...sourceColumn.items];\n            const destItems = [...destColumn.items];\n            const [removed] = sourceItems.splice(source.index, 1);\n            destItems.splice(destination.index, 0, removed);\n            return { ...prev,\n              columns: { ...prev.columns,\n                [sourceId]: { ...sourceColumn,\n                  items: sourceItems\n                },\n                [destinationId]: { ...destColumn,\n                  items: destItems\n                }\n              }\n            };\n          });\n        } else {\n          this.setState(prev => {\n            const column = prev.columns[sourceId];\n            const copiedItems = [...column.items];\n            const [removed] = copiedItems.splice(source.index, 1);\n            copiedItems.splice(destination.index, 0, removed);\n            return { ...prev,\n              columns: { ...prev.columns,\n                [sourceId]: { ...column,\n                  items: copiedItems\n                }\n              }\n            };\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, Object.entries(columns).map(([id, column]) => {\n      return React.createElement(Column, Object.assign({ ...column,\n        id,\n        key: id\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }));\n    }))));\n  }\n\n}\n\nexport default ManageTrack;","map":{"version":3,"sources":["C:/Users/Eric/Desktop/powerApp/client/src/components/Tracks/ManageTrack.js"],"names":["React","Component","axios","DragDropContext","Row","Column","TrackForm","StyledContainer","API_URL","ManageTrack","constructor","props","onSubmit","e","preventDefault","id","match","params","trackNumber","trackName","columns","state","track","trackInfo","items","put","then","res","history","alert","push","onChange","name","value","target","setState","elements","elementsEnums","componentDidMount","Promise","all","get","response","data","tracks","reduce","one","_id","oldState","filter","element","some","trackEle","render","rest","source","destination","droppableId","sourceId","index","sourceIndex","destinationId","destinationIndex","prev","sourceColumn","destColumn","sourceItems","destItems","removed","splice","column","copiedItems","Object","entries","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport Column from \"./TracksBoard/Column\";\r\nimport TrackForm from \"./TrackForm\";\r\nimport { StyledContainer } from \"../../styles\";\r\nimport { API_URL } from \"../../constants\";\r\n\r\nclass ManageTrack extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      trackName: \"\",\r\n      trackNumber: \"\",\r\n      trackInfo: [],\r\n      elements: [],\r\n      elementsEnums: {},\r\n      columns: {\r\n        \"column-1\": {\r\n          name: \"Elements\",\r\n          items: [],\r\n        },\r\n        \"column-2\": {\r\n          name: \"Track List\",\r\n          items: [],\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n\r\n    Promise.all([\r\n      axios.get(`${API_URL}/tracks/${id}`).then((response) => {\r\n        return response.data;\r\n      }),\r\n      axios.get(`${API_URL}/elements/`).then((response) => {\r\n        return response.data;\r\n      }),\r\n    ]).then(([tracks, elements]) => {\r\n      const elementsEnums = elements.reduce((all, one) => {\r\n        return {\r\n          ...all,\r\n          [one._id]: one,\r\n        };\r\n      }, {});\r\n\r\n      this.setState((oldState) => {\r\n        const state = { ...oldState };\r\n\r\n        state.columns[\"column-1\"].items = elements.filter((element) => {\r\n          return !tracks.trackInfo.some(\r\n            (trackEle) => trackEle._id === element._id\r\n          );\r\n        });\r\n\r\n        state.columns[\"column-2\"].items = tracks.trackInfo;\r\n        return {\r\n          ...state,\r\n          ...tracks,\r\n          elementsEnums,\r\n          elements,\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { id } = this.props.match.params;\r\n    const { trackNumber, trackName, columns } = this.state;\r\n    const track = {\r\n      trackNumber,\r\n      trackName,\r\n      trackInfo: columns[\"column-2\"].items,\r\n    };\r\n\r\n    axios.put(`${API_URL}/tracks/update/${id}`, track).then((res) => {\r\n      const { history } = this.props;\r\n      alert(\"updated!\");\r\n      history.push(\"/tracks\");\r\n    });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { columns, elementsEnums, elements, trackInfo, ...rest } = this.state;\r\n    // const col1 = columns[\"column-1\"];\r\n    // const col2 = columns[\"column-2\"];\r\n    return (\r\n      <StyledContainer fluid title=\"Update Track\">\r\n        <TrackForm\r\n          {...this.state}\r\n          buttonText=\"Update Track\"\r\n          onChange={this.onChange}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n        <DragDropContext\r\n          onDragEnd={({ source, destination }) => {\r\n            if (!destination) {\r\n              return;\r\n            }\r\n            const { droppableId: sourceId, index: sourceIndex } = source;\r\n            const {\r\n              droppableId: destinationId,\r\n              index: destinationIndex,\r\n            } = destination;\r\n\r\n            if (sourceId !== destinationId) {\r\n              this.setState((prev) => {\r\n                const sourceColumn = prev.columns[sourceId];\r\n                const destColumn = prev.columns[destinationId];\r\n                const sourceItems = [...sourceColumn.items];\r\n                const destItems = [...destColumn.items];\r\n\r\n                const [removed] = sourceItems.splice(source.index, 1);\r\n\r\n                destItems.splice(destination.index, 0, removed);\r\n                return {\r\n                  ...prev,\r\n                  columns: {\r\n                    ...prev.columns,\r\n                    [sourceId]: {\r\n                      ...sourceColumn,\r\n                      items: sourceItems,\r\n                    },\r\n                    [destinationId]: {\r\n                      ...destColumn,\r\n                      items: destItems,\r\n                    },\r\n                  },\r\n                };\r\n              });\r\n            } else {\r\n              this.setState((prev) => {\r\n                const column = prev.columns[sourceId];\r\n                const copiedItems = [...column.items];\r\n                const [removed] = copiedItems.splice(source.index, 1);\r\n                copiedItems.splice(destination.index, 0, removed);\r\n                return {\r\n                  ...prev,\r\n                  columns: {\r\n                    ...prev.columns,\r\n                    [sourceId]: {\r\n                      ...column,\r\n                      items: copiedItems,\r\n                    },\r\n                  },\r\n                };\r\n              });\r\n            }\r\n          }}\r\n        >\r\n          <Row>\r\n            {Object.entries(columns).map(([id, column]) => {\r\n              return <Column {...{ ...column, id, key: id }} />;\r\n            })}\r\n          </Row>\r\n        </DragDropContext>\r\n      </StyledContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManageTrack;\r\n"]},"metadata":{},"sourceType":"module"}